#version 330 core
out vec4 FragColor;

in vec3 pFragPos;
in vec3 pNormal; 
in vec2 TexCoord;
in mat3 pMatNormal;

struct Materail {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
    float shininess_strength;
    int has_normal_tex;
};

struct Light {
    //vec3 position;
    vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Materail uMaterail;
uniform Light uLight;
uniform vec3 uCameraPos;
uniform sampler2D texture_diffuse0;
uniform sampler2D texture_specular0;
uniform sampler2D texture_normal0;

void main()
{
    vec3 color = texture(texture_diffuse0, TexCoord).xyz;
    
    // 计算光照
    vec3 normal = normalize(pNormal);
    if (uMaterail.has_normal_tex == 1) {
        normal = pMatNormal * texture(texture_normal0, TexCoord).xyz;
    }

    // ambient
    vec3 ambient = uLight.ambient * color;
    
    // diffuse
    vec3 dirLight = normalize(-uLight.direction);
    float diff = max(dot(dirLight, normal), 0.0);
    vec3 diffuse = uLight.diffuse * color * diff;
    
    // specular
    vec3 viewDir = normalize(uCameraPos - pFragPos);
    vec3 halfwayDir = normalize(dirLight + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 1);//uMaterail.shininess
    vec3 specular = uLight.specular * spec;
    
    vec3 result =  (ambient + diffuse + specular);
    FragColor = vec4(result, 1.0);
}
