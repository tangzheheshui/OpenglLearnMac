#version 330 core
out vec4 FragColor;

in vec2 TexCoord;
in vec3 Normal;
in vec3 pFragPos;
in vec4 FragPosLightSpace;

struct Light {
    vec4 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light uLight;
uniform vec3 uCameraPos;

uniform sampler2D uTexture;
uniform sampler2D uTextureShadowMap;
uniform sampler2D uTextureHeight;
uniform int uHasHeight;

float ShadowCalculation(vec4 fragPosLightSpace)
{
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    float currentDepth = projCoords.z;
    float shadow = 0.f;
    
    vec2 texelSize = 1.0 / textureSize(uTextureShadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(uTextureShadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth > pcfDepth ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    return shadow;
}

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
    float height =  texture(uTextureHeight, texCoords).r;    
    vec2 p = viewDir.xy / viewDir.z * (height * 0.1);
    return texCoords - p;    
}

void main()
{
    vec3 viewDir = normalize(uCameraPos - pFragPos);
    vec2 texCoord = TexCoord;
    if (uHasHeight > 0.f) {
        texCoord = ParallaxMapping(TexCoord, viewDir);
    }
    
    vec3 color = texture(uTexture, texCoord).xyz;
    
    // ambient
    vec3 ambient = uLight.ambient * color;
    
    // diffuse
    vec3 dirLight = normalize(uLight.position.xyz - pFragPos);
    float diff = max(dot(dirLight, Normal), 0.0);
    vec3 diffuse = uLight.diffuse * color * diff;
    
    // specular
    vec3 halfwayDir = normalize(dirLight + viewDir);  
    float spec = pow(max(dot(Normal, halfwayDir), 0.0), 32.0);
    vec3 specular = uLight.specular * spec;
 
    vec3 result =  (ambient + diffuse + specular);
    
    // shadow
    float shadow = ShadowCalculation(FragPosLightSpace); 
    float dark = 1 - shadow * 0.7;
    
    FragColor = vec4(dark * result, 1.0);
}
