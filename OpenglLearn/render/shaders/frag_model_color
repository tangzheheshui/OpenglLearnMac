#version 330 core
out vec4 FragColor;

in vec3 pFragPos;
in vec3 pNormal; 

struct Materail {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
    float shininess_strength;
};

struct Light {
    bool is_open;
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Materail uMaterail;
uniform Light uLight;
uniform vec3 uCameraPos;

void main()
{
    vec3 result;
    if (uLight.is_open) {
        vec3 normal = normalize(pNormal);

        // ambient
        vec3 ambient = uLight.ambient * uMaterail.ambient;
    
        // diffuse
        vec3 dirLight = normalize(uLight.position.xyz - pFragPos);
        float diff = max(dot(dirLight, normal), 0.0);
        vec3 diffuse = uLight.diffuse * uMaterail.diffuse * diff;
    
        // specular
        vec3 viewDir = normalize(uCameraPos - pFragPos);
        vec3 reflectDir = reflect(-dirLight, normal);  
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), uMaterail.shininess);
        vec3 specular = uLight.specular * (spec * uMaterail.specular * uMaterail.shininess_strength);
    
        result =  (ambient + diffuse);
    } else {
        result = uMaterail.diffuse;
    }
    
    FragColor = vec4(result, 1.0);
}
